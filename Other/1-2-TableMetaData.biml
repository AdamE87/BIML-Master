<#@template language="C#" tier="1"#>
<#@import namespace="System.Data"#>
<#
    var sourceConnection = RootNode.OleDbConnections["KickstartDb"];
    string stagingDbName = RootNode.OleDbConnections.Where(c=>c.Name.ToUpper().Contains("STAGING")).First().Name;
    string dbSQL = "SELECT [StagingDatabaseName] FROM StagingDatabases WHERE StagingDatabaseName='"+ stagingDbName+ "'";
#>
<Biml xmlns="http://schemas.varigence.com/biml.xsd">
    <Databases>
    <#
    DataTable dbTbl = ExternalDataAccess.GetDataTable(sourceConnection.ConnectionString,dbSQL);
    foreach(DataRow dr in dbTbl.Rows){#>
        <Database Name="<#=dr[0]#>" ConnectionName="Master"></Database>
    <#}#>
    </Databases>
    <Schemas>
    <#foreach(DataRow dr in dbTbl.Rows){#>
        <Schema Name="dbo" DatabaseName="<#=dr[0]#>"></Schema>
    <#}#>
    </Schemas>
    <Tables>
        <#
            foreach(DataRow dr in dbTbl.Rows){
                string dbName = dr[0].ToString();
        #>
        <Table Name="ETLAudit" SchemaName="<#=dbName#>.dbo">
            <Annotations>
                <Annotation AnnotationType="Tag" Tag="GeneratePkg">no</Annotation>
            </Annotations>
            <Columns>
                <Column Name="AuditKey" DataType="Int32" IdentityIncrement="1" IdentitySeed="-1" IsNullable="false"></Column>
                <TableReference Name="ParentAuditKey" DataType="Int32" TableName="ETLAudit" ForeignKeyConstraintMode="CreateAndCheck"></TableReference>
                <Column Name="TableName" DataType="AnsiString" Length="500" IsNullable="true"></Column>
                <Column Name="PkgName" DataType="AnsiString" Length="50" IsNullable="true"></Column>
                <Column Name="PkgGuid" DataType="Guid" IsNullable="true"></Column>
                <Column Name="PkgVersionGuid" DataType="Guid" IsNullable="true"></Column>
                <Column Name="PkgVersionMajor" DataType="Int16" IsNullable="true"></Column>
                <Column Name="PkgVersionMinor" DataType="Int16" IsNullable="true"></Column>
                <Column Name="ExecStartDT" DataType="DateTime" IsNullable="false"></Column>
                <Column Name="ExecStopDT" DataType="DateTime" IsNullable="true"></Column>
                <Column Name="ExecutionInstanceGuid" DataType="Guid" IsNullable="true"></Column>
                <Column Name="ExtractRowCount" DataType="Int64" IsNullable="true"></Column>
                <Column Name="InsertRowCount" DataType="Int64" IsNullable="true"></Column>
                <Column Name="UpdateRowCount" DataType="Int64" IsNullable="true"></Column>
                <Column Name="ErrorRowCount" DataType="Int64" IsNullable="true"></Column>
                <Column Name="TableInitialRowCount" DataType="Int64" IsNullable="true"></Column>
                <Column Name="TableFinalRowCount" DataType="Int64" IsNullable="true"></Column>
                <Column Name="TableMaxDateTime" DataType="DateTime" IsNullable="true"></Column>
                <Column Name="SuccessfulProcessingInd" DataType="AnsiStringFixedLength" Length="1" Default="'N'" IsNullable="false"></Column>
            </Columns>
            <Keys>
                <PrimaryKey Name="pk_ETLAudit" Clustered="true" Unique="true">
                    <Columns>
                        <Column ColumnName="AuditKey" SortOrder="Asc"></Column>
                    </Columns>
                </PrimaryKey>
            </Keys>
        </Table>
            <#var filesSQL = "SELECT FileName,HasKey FROM [Files] A INNER JOIN DATASETS B ON A.DATASETID=B.DATASETID INNER JOIN STAGINGDATABASES C ON C.STAGINGDATABASEID=B.STAGINGDATABASEID WHERE StagingDatabaseName='" + dbName + "'";
              DataTable fileTbl = ExternalDataAccess.GetDataTable(sourceConnection.ConnectionString,filesSQL);
              foreach(DataRow fileRow in fileTbl.Rows){
                string fileName = fileRow[0].ToString();
                string hasKey   = fileRow[1].ToString();
                Dictionary<string,int> keyCols = new Dictionary<string,int>();
            #>
        <Table Name="<#=fileName#>" SchemaName="<#=dbName#>.dbo">
            
            <Columns>
            <#
                var columnSQL =  "SELECT ColumnName,B2.BimlDataType AS OutputDataType,OutputWidth,B1.BimlDataType AS InputDataType,Scale,IsNullable,T.Expression,A.KeyPosition ";
					columnSQL += "FROM FileDefinitions A ";
					columnSQL += "INNER JOIN [Files] B ON A.FileID=b.[FileID] ";
					columnSQL += "INNER JOIN BimlDataType B1 ON B1.BimlDataTypeID=A.InputBimlDataTypeID ";
					columnSQL += "INNER JOIN BimlDataType B2 ON B2.BimlDataTypeID=A.OutputBimlDataTypeID ";
					columnSQL += "OUTER APPLY(";
					columnSQL += "	SELECT REPLACE(E.Expression,'[Field]','['+A.ColumnName+']') AS Expression ";
				    columnSQL += "	FROM Expressions E ";
				    columnSQL += "	WHERE E.ExpressionID = A.ExpressionID ";
					columnSQL += ") T ";
					columnSQL += "WHERE B.FileName='" + fileName + "' AND ImportToStage='true' ";
					columnSQL += "ORDER BY Ordinal";
					
                DataTable colTbl = ExternalDataAccess.GetDataTable(sourceConnection.ConnectionString,columnSQL);
                foreach(DataRow colRow in colTbl.Rows){
                    string colName  =   colRow[0].ToString();
                    string outType  =   colRow[1].ToString();
                    string outWdth  =   colRow[2].ToString();
                    string inType   =   colRow[3].ToString();
                    string scale    =   colRow[4].ToString();
                    string isNull   =   colRow[5].ToString();
                    string xpression=	colRow[6].ToString();
                    int    keyPos   =   int.Parse(colRow[7].ToString());
                    
                    if(hasKey=="true" && keyPos>0){
                        keyCols.Add(colName,keyPos);   
                    }
					if(outType=="Decimal"){
			#>
				<Column Name="<#=colName#>" DataType="<#=outType#>" Precision="<#=outWdth#>" Scale="<#=scale#>" IsNullable="<#=isNull#>">
			<#} else {#>
				<Column Name="<#=colName#>" DataType="<#=outType#>" Length="<#=outWdth#>" IsNullable="<#=isNull#>">
			<#}#>
			        <Annotations>
						<Annotation AnnotationType="Tag" Tag="KeyPos"><#=keyPos#></Annotation>
						<#if(outType!=inType){#>
						<Annotation AnnotationType="Tag" Tag="ConversionRequired">yes</Annotation>
						<#}#>
						<#if(xpression!=""){#>
						<Annotation AnnotationType="Tag" Tag="Transformation"><#=xpression#></Annotation>
						<#}#>
					</Annotations>
				</Column>
				<#}#>
				<TableReference Name="AuditKey" TableName="ETLAudit" DataType="Int32" ForeignKeyConstraintMode="CreateAndCheck">
				    <Annotations>
				        <Annotation AnnotationType="Tag" Tag="KeyPos">0</Annotation>
				    </Annotations>
				</TableReference>
			</Columns>
			<#if(hasKey=="true"){#>
		    <Keys>
                <PrimaryKey Name="pk_<#=fileName#>" Clustered="true" IgnoreDupKey="false" Unique="true">
                    <Columns>
                        <#foreach(var col in keyCols.OrderBy(k=>k.Value)){#>
                        <Column ColumnName="<#=col.Key#>" SortOrder="Asc"></Column>
                        <#}#>
                    </Columns>
                </PrimaryKey>
            </Keys>
			<#}#>
        </Table>
        <Table Name="<#=fileName#>_Error" SchemaName="<#=dbName#>.dbo">
			<Annotations>
				<Annotation AnnotationType="Tag" Tag="GeneratePkg">no</Annotation>
			</Annotations>
			<Columns>
				<#
				columnSQL = "SELECT ColumnName FROM FileDefinitions A INNER JOIN [Files] B ON A.FileID=b.[FileID] WHERE B.FileName='" + fileName + "' AND ImportToStage='true'";
				colTbl = ExternalDataAccess.GetDataTable(sourceConnection.ConnectionString,columnSQL);
				foreach(DataRow colRow in colTbl.Rows){
					string colName  =   colRow[0].ToString();
				#>
				<Column Name="<#=colName#>" DataType="AnsiString" Length="255" />
				<#}#>
				<TableReference Name="AuditKey" TableName="dbo.ETLAudit" DataType="Int32" ForeignKeyConstraintMode="CreateAndCheck"></TableReference>
			</Columns>
		</Table>
        <#}#>
    <#}#>
    </Tables>
</Biml>