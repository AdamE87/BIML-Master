<#@template language="C#" tier="2"#>
<#@property name="StagingDb" type="String" required="true"#>
<#@import namespace="System.Data"#>
<#
    string cnxn = RootNode.OleDbConnections["KickstartDb"].ConnectionString;
	string bimlDir = @"W:\IT$\DATA MANAGEMENT\03_PROJECT WORK\01_CENTRAL_PROJECTS\KICKSTART\";
#>
<Biml xmlns="http://schemas.varigence.com/biml.xsd">
    <FileFormats>
        <#
        foreach(var db in RootNode.Databases.Where(d=>d.Name==StagingDb)){
            string sqlFiles = "SELECT FileName,Fieldtype,[CodePage],RowDelimiter,TextQualifier,ColumnNamesInFirstRow,HeaderRowDelimiter,IsUnicode FROM [Files] A INNER JOIN DataSets B ON a.DataSetID = B.DataSetID INNER JOIN StagingDatabases C ON C.StagingDatabaseID = B.StagingDatabaseID WHERE C.StagingDatabaseName='" + StagingDb + "'";
            DataTable fileTbl = ExternalDataAccess.GetDataTable(cnxn,sqlFiles);
            foreach(DataRow fileRow in fileTbl.Rows){
                string fileName = fileRow[0].ToString();
                string ffType   = fileRow[1].ToString();
                string codePage = fileRow[2].ToString();
                string rDlm     = fileRow[3].ToString();
                string qlfr     = fileRow[4].ToString();
                string hdrsIn1st= fileRow[5].ToString();
                string hdrDlm   = fileRow[6].ToString();
                string isUnicode= fileRow[7].ToString();
        #>
        <FlatFileFormat Name="<#=fileName#>" FlatFileType="<#=ffType#>" CodePage="<#=codePage#>" RowDelimiter="<#=rDlm#>" TextQualifer="<#=qlfr#>" ColumnNamesInFirstDataRow="<#=hdrsIn1st#>" HeaderRowDelimiter="<#=hdrDlm#>" IsUnicode="<#=isUnicode#>">
            <Columns>
            <#
            string sqlDefs = "SELECT ColumnName,B1.BimlDataType AS InputDataType,InputLength,TextQualified,CASE WHEN (CASE WHEN Ordinal = (MAX(Ordinal) OVER (PARTITION BY FD.FILEID ORDER BY FD.FILEID)) THEN 1 ELSE 0 END) = 1 THEN F.RowDelimiter ELSE F.FieldDelimiter END AS Qualifier,Scale ";
            sqlDefs += "FROM FileDefinitions FD ";
            sqlDefs += "INNER JOIN Files F ON F.FileID=FD.FileID ";
            sqlDefs += "INNER JOIN Datasets D ON D.DatasetID = F.DatasetID ";
            sqlDefs += "INNER JOIN StagingDatabases DB on DB.StagingDatabaseID = D.StagingDatabaseID ";
			sqlDefs += "INNER JOIN BIMLDataType B1 on FD.InputBimlDataTypeID =B1.BimlDataTypeID ";
            sqlDefs += "WHERE F.FileName='" + fileName + "' AND StagingDatabaseName='" + db.Name +"'";
            sqlDefs += "ORDER BY Ordinal";
            
            DataTable defsTbl = ExternalDataAccess.GetDataTable(cnxn,sqlDefs);
            foreach(DataRow defsRow in defsTbl.Rows){
                string colName      = defsRow[0].ToString();
                string inpType      = defsRow[1].ToString();
                string inpLength    = defsRow[2].ToString();
                string qlfd         = defsRow[3].ToString();
                string dlm          = defsRow[4].ToString();
                string scale        = defsRow[5].ToString();
            #> 
                <Column Name="<#=colName#>" CodePage="<#=codePage#>" ColumnType="<#=ffType#>" DataType="<#=inpType#>" Delimiter="<#=dlm#>" InputLength="<#=inpLength#>" Length="<#=inpLength#>" TextQualified="<#=qlfd#>"></Column>
            <#}#>
            </Columns>
        </FlatFileFormat>
        <#
            }
        }
        #>
    </FileFormats>
    <Connections>
        <#foreach(var db in RootNode.Databases){#>
            <OleDbConnection Name="<#=db.Name#>" ConnectionString="Provider=SQLNCLI11;Server=SQL04;Initial Catalog=<#=db.Name#>;Integrated Security=SSPI;"></OleDbConnection>
        <#
        string fileSQL = "SELECT FileName,FilePath FROM FILES F INNER JOIN DATASETS D ON F.DataSetID=D.DATASETID INNER JOIN StagingDatabases DB ON DB.StagingDatabaseID = D.StagingDatabaseID WHERE DB.StagingDatabaseName='" + db.Name + "'";
          DataTable flsTbl = ExternalDataAccess.GetDataTable(cnxn,fileSQL);
          foreach(DataRow fileRow in flsTbl.Rows){#>
            <FlatFileConnection Name="FF-<#=fileRow[0]#>" FileFormat="<#=fileRow[0]#>" FilePath="<#=fileRow[1]#>"></FlatFileConnection>
        <#}
        }
        #>
    </Connections>
    <Packages>
        <#foreach(var db in RootNode.Databases){
            int pkgNum = 0;
            foreach(var tbl in RootNode.Tables.Where(t=>t.Schema.Database.Name==db.Name && t.GetTag("GeneratePkg")!="no").OrderBy(t=>t.Name)){
                pkgNum++;
            #>
        <Package Name="1-<#=pkgNum#>-<#=tbl.Name#>-Extract" ProtectionLevel="EncryptSensitiveWithUserKey" ConstraintMode="LinearOnSuccess">
            <Parameters>
                <Parameter Name="ParentAuditKey" DataType="Int32">0</Parameter>
            </Parameters>
            <Variables>
				<#=CallBimlScript(bimlDir + "0-Variables.biml",tbl.Name,true)#>
            </Variables>
            <Tasks>
                <ExecuteSQL Name="Truncate <#=tbl.Name#>" ConnectionName="<#=db.Name#>">
                    <DirectInput>TRUNCATE TABLE <#=tbl.Name#></DirectInput>
                </ExecuteSQL>
                <#=CallBimlScript(bimlDir + "0-ES-SQLAudit-Start.biml",db.Name)#>
                <Dataflow Name="Load <#=tbl.Name#> data">
                    <Transformations>
                        <FlatFileSource Name="FF-<#=tbl.Name#>" ConnectionName="FF-<#=tbl.Name#>">
                            <Columns>
                            <#
                            string sqlDefs = "SELECT ColumnName,ImportToStage ";
                            sqlDefs += "FROM FileDefinitions FD ";
                            sqlDefs += "INNER JOIN Files F ON F.FileID=FD.FileID ";
                            sqlDefs += "INNER JOIN Datasets D ON D.DatasetID = F.DatasetID ";
                            sqlDefs += "INNER JOIN StagingDatabases DB on DB.StagingDatabaseID = D.StagingDatabaseID ";
                            sqlDefs += "WHERE F.FileName='" + tbl.Name + "' AND StagingDatabaseName='" + db.Name +"'";
                            sqlDefs += "ORDER BY Ordinal";
                                
                            DataTable flsTbl = ExternalDataAccess.GetDataTable(cnxn,sqlDefs);
                            foreach(DataRow fileRow in flsTbl.Rows){
                                string colName  = fileRow[0].ToString();
                                string isUsed   = fileRow[1].ToString();
                            #>
                                <Column SourceColumn="<#=colName#>" TargetColumn="<#=colName#>" IsUsed="<#=isUsed#>"></Column>
                            <#}#>
                            </Columns>
                        </FlatFileSource>
                        <RowCount Name="RC Extract Count" VariableName="User.rowCountExtract"></RowCount>
                        <DerivedColumns Name="AddAuditKey">
                            <Columns>
                                <Column Name="AuditKey" DataType="Int32">@[User::auditKey]</Column>
                            </Columns>
                        </DerivedColumns>
						<#if(tbl.Columns.Any(c=>c.GetTag("Transformation") !="" )){#>
							<DerivedColumns Name="Transformations">
								<Columns>
									<#foreach(var col in tbl.Columns.Where(c=>c.GetTag("Transformation")!="")){#>
										<Column Name="<#=col.Name#>" ReplaceExisting="true" DataType="<#=col.DataType#>"><#=col.GetTag("Transformation").ToString()#></Column>
									<#}#>
								</Columns>
							</DerivedColumns>
						<#}#>
                        <#if(tbl.Columns.Any(c=>c.GetTag("ConversionRequired") != "")){#>
                            <DataConversion Name="ConvertData">
                                <Columns>
                                <#foreach(var col in tbl.Columns.Where(c=>c.GetTag("ConversionRequired")=="yes")){
                                    if(col.DataType.ToString()=="Decimal"){
                                #>
                                    <Column SourceColumn="<#=col.Name#>" TargetColumn="conv_<#=col.Name#>" DataType="<#=col.DataType#>" Precision="<#=col.Precision#>" Scale="<#=col.Scale#>"></Column> 
                                    <#}else{#>
                                    <Column SourceColumn="<#=col.Name#>" TargetColumn="conv_<#=col.Name#>" DataType="<#=col.DataType#>"></Column>
                                    <#}#>
                                <#}#>
                                </Columns>
								<ErrorHandling ErrorRowDisposition="RedirectRow" TruncationRowDisposition="RedirectRow">
									<Outputs>
										<Output OutputName="ConvertData.Error" ErrorRowDisposition="RedirectRow" TruncationRowDisposition="RedirectRow"></Output>
									</Outputs>
								</ErrorHandling>
                            </DataConversion>
                            <RowCount Name="RC Error" VariableName="User.rowCountError">
							    <InputPath OutputPathName="ConvertData.Error"></InputPath>
    						</RowCount>
    						<OleDbDestination Name="<#=tbl.Name#>_Errors" ConnectionName="<#=db.Name#>" AlwaysUseDefaultCodePage="true" DefaultCodePage="<#=tbl.GetTag("CodePage")#>">
    							<ExternalTableOutput Table="<#=tbl.Name#>_Error"></ExternalTableOutput>
    							<InputPath OutputPathName="RC Error.Output"></InputPath>
    						</OleDbDestination>
                        <#}#>
						<RowCount Name="RCInsert" VariableName="User.rowCountInsert">
						<#
						string outputName="";
						if(tbl.Columns.Any(c=>c.GetTag("ConversionRequired") != "")){
					        outputName="ConvertData";
					    } else {
						    if(tbl.Columns.Any(c=>c.GetTag("Transformation") !="" )){
					   	        outputName="Transformations";  
						    } else {
    					        outputName="AddAuditKey";
					        }
					    }
    					#>
    					   <InputPath OutputPathName="<#=outputName#>.Output"></InputPath> 
						</RowCount>
                        <OleDbDestination Name="<#=tbl.Name#>" ConnectionName="<#=db.Name#>" AlwaysUseDefaultCodePage="true" DefaultCodePage="<#=tbl.GetTag("CodePage")#>">
                        <#if(tbl.Columns.Any(c=>c.GetTag("ConversionRequired") != "")){#>
                            <Columns>
                            <#foreach(var col in tbl.Columns.Where(c=>c.GetTag("ConversionRequired")=="yes")){#>
                                <Column SourceColumn="conv_<#=col.Name#>" TargetColumn="<#=col.Name#>"></Column>
                            <#}#>
                            </Columns>
                        <#}#>
							<InputPath OutputPathName="RCInsert.Output"></InputPath>
                            <ExternalTableOutput Table="<#=tbl.Name#>"></ExternalTableOutput>
                        </OleDbDestination>
                    </Transformations>
                </Dataflow>
                <ExecuteSQL Name="Rebuild Indexes" ConnectionName="<#=db.Name#>">
                    <DirectInput>
                        ALTER INDEX ALL ON <#=tbl.Name#> REBUILD
                    </DirectInput>
                </ExecuteSQL>
                <ExecuteSQL Name="ES - Count Rows <#=tbl.Name#>" ConnectionName="<#=db.Name#>" ResultSet="SingleRow">
                    <Expressions>
                        <Expression PropertyName="SqlStatementSource">"SELECT COUNT(1) FROM " + @[User::tableName]</Expression>
                    </Expressions>
                    <DirectInput></DirectInput>
                    <Results>
                        <Result Name="0" VariableName="User.rowCount"></Result>
                    </Results>
                </ExecuteSQL>
                <#=CallBimlScript(bimlDir + "0-ES-SQLAudit-End.biml",db.Name,false)#>
            </Tasks>
        </Package>
            <#}#>
        <#}#>
        <#foreach(var db in RootNode.Databases){
            int pkgNum = 0;
        #>
        <Package Name="1-0-Master-Extract" ProtectionLevel="EncryptSensitiveWithUserKey">
            <Variables>
                <#=CallBimlScript(bimlDir + "0-Variables.biml","Master Extract Package",false)#>
            </Variables>
            <Tasks>
            <#=CallBimlScript(bimlDir + "0-ES-SQLAudit-Start.biml",db.Name)#>
			<#
				List<string> pkgs = new List<string>();
			#>
            <#foreach(var tbl in RootNode.Tables.Where(t=>t.Schema.Database.Name==db.Name && t.GetTag("GeneratePkg")!="no").OrderBy(t=>t.Name)){
                pkgNum++;
				pkgs.Add("EP-" + tbl.Name);
            #>
                <ExecutePackage Name="EP-<#=tbl.Name#>">
                    <PrecedenceConstraints>
                        <Inputs>
                            <Input EvaluationOperation="Constraint" OutputPathName="ES-SQL Audit.Output"></Input>
                        </Inputs>
                    </PrecedenceConstraints>
                    <ExternalProjectPackage Package="1-<#=pkgNum#>-<#=tbl.Name#>-Extract.dtsx"></ExternalProjectPackage>
                    <ParameterBindings>
                        <ParameterBinding Name="ParentAuditKey" VariableName="User.auditKey"></ParameterBinding>
                    </ParameterBindings>
                </ExecutePackage>
            <#}#>
            <#=CallBimlScript(bimlDir + "0-ES-SQLAudit-End.biml",db.Name,true,pkgs)#>
            </Tasks>
        <#}#> 
        </Package>
    </Packages>
</Biml>